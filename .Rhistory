K <- dim(edges)[3]
if(file="hlsm.stan"){
sigmat <- array(0, dim=c(K,2,2))
sigmat[,1,1] <- sigma
sigmat[,2,2] <- sigma
} else {
sigmat <- array(sigma, dim=c(K,2))
}
hlsm.data <- list(N=N,
K=K,
edges=edges,     # make sure these are ints  (not bool) else FLATTENED
sigma_alpha=1,   # NO idea what these should be, using mvlsm's
mu_b=c(0,0),
sigma_b=sigma*diag(2), # [s   0; 0   s] (one matrix)
sigma_z=sigmat)        # [s_k 0; 0 s_k] (one matrix per layer)
hlsm.init <- find.init(edges)
fit <- stan(file=file,
model_name=model_name,
iter=iter,
data=hlsm.data,
init=hlsm.init,
verbose=T,
control=list(max_treedepth = 15))
z.hat <- unpack.hlsm.fit(fit, N, K)
return(list(fit=fit, z.hat=z.hat, init=hlsm.init()))
}
one.shot <- function(edges, sigma, file, model_name, iter){
N <- dim(edges)[1]
K <- dim(edges)[3]
if(file=="hlsm.stan"){
sigmat <- array(0, dim=c(K,2,2))
sigmat[,1,1] <- sigma
sigmat[,2,2] <- sigma
} else {
sigmat <- array(sigma, dim=c(K,2))
}
hlsm.data <- list(N=N,
K=K,
edges=edges,     # make sure these are ints  (not bool) else FLATTENED
sigma_alpha=1,   # NO idea what these should be, using mvlsm's
mu_b=c(0,0),
sigma_b=sigma*diag(2), # [s   0; 0   s] (one matrix)
sigma_z=sigmat)        # [s_k 0; 0 s_k] (one matrix per layer)
hlsm.init <- find.init(edges)
fit <- stan(file=file,
model_name=model_name,
iter=iter,
data=hlsm.data,
init=hlsm.init,
verbose=T,
control=list(max_treedepth = 15))
z.hat <- unpack.hlsm.fit(fit, N, K)
return(list(fit=fit, z.hat=z.hat, init=hlsm.init()))
}
two.ovals <- positions.to.multigraph(list(stretch(b, 2, dim="x"),
stretch(b, 2, dim="y")))
sigma <- 10
two.ovals.model   <- one.shot(two.ovals,   sigma, "hlsm.stan", "two_ovals",   niter)
niter <- 1e3
two.ovals.model   <- one.shot(two.ovals,   sigma, "hlsm.stan", "two_ovals",   niter)
two.ovals <- positions.to.multigraph(list(stretch(b, 2, dim="x"),
stretch(b, 2, dim="y")))
two.ovals.model   <- one.shot(two.ovals,   sigma, "hlsm.stan", "two_ovals",   niter)
one.shot <- function(edges, sigma, file, model_name, iter){
N <- dim(edges)[1]
K <- dim(edges)[3]
if(file=="hlsm.stan"){
sigmat <- array(0, dim=c(K,2,2))
sigmat[,1,1] <- sigma
sigmat[,2,2] <- sigma
} else {
sigmat <- array(sigma, dim=c(K,2))
}
hlsm.data <- list(N=N,
K=K,
edges=edges,     # make sure these are ints  (not bool) else FLATTENED
sigma_alpha=10,   # NO idea what these should be, using mvlsm's
mu_b=c(0,0),
sigma_b=sigma*diag(2), # [s   0; 0   s] (one matrix)
sigma_z=sigmat)        # [s_k 0; 0 s_k] (one matrix per layer)
hlsm.init <- find.init(edges)
fit <- stan(file=file,
model_name=model_name,
iter=iter,
data=hlsm.data,
init=hlsm.init,
verbose=T,
control=list(max_treedepth = 15))
z.hat <- unpack.hlsm.fit(fit, N, K)
return(list(fit=fit, z.hat=z.hat, init=hlsm.init()))
}
two.ovals.model   <- one.shot(two.ovals,   sigma, "hlsm.stan", "two_ovals",   niter)
find.init <- function(m){
N <- dim(m)[1]
K <- dim(m)[3]
avg <- (apply(m, MARGIN=1:2, sum) > 0) + 0    # init failed with K=3; round=>0?
lsm <- ergmm(avg ~ euclidean(d=2)) # Squared?
z.hat <- lsm$mcmc.pmode$Z
init <- function(){
z <- array(dim=c(N,K,2))
for(k in 1:K)
z[,k,] <- z.hat
return(list(alpha=rep(1,K), z=z, b=z.hat))
}
return(init) # needs a FUNCTION, remember -- why, who knows.
}
two.ovals.model   <- one.shot(two.ovals,   sigma, "hlsm.stan", "two_ovals",   niter)
plot.multigraph(two.ovals.model$z.hat)
dim(two.ovals.model$z.hat)
names(two.ovals.model)
two.ovals.model$z.hat
class(two.ovals.model$z.hat)
names(two.ovals.model$z.hat)n
names(two.ovals.model$z.hat)
plot.multigraph(two.ovals.model$z.hat$z)
three.ovals.model <- one.shot(three.ovals, sigma, "hlsm.stan", "three_ovals", niter)
plot.multigraph(three.ovals.model$z.hat$z)
a <- array(1:4, dim=c(2,2))
a
b <- a
b
c(a,b)
?range
plot.model <- function(m, alpha=F){
z <- m$z
b <- m$b
if(!alpha)
alpha <- m$alpha
# First, make sure the plot is big enough
xlim <- range(c(z[,,1], b[,1]))
ylim <- range(c(z[,,2], b[,2]))
plot.lsm(alpha[1], z[,1,], add=F, col=1, xlim=xlim, ylim=ylim)
for(i in 2:dim(Z)[3]){
plot.lsm(alpha[i], z[,i,], add=T, col=i)
}
}
plot.model <- function(m, alpha=F){
z <- m$z.hat$z
b <- m$z.hat$b
if(!alpha)
alpha <- m$z.hat$alpha
# First, make sure the plot is big enough
xlim <- range(c(z[,,1], b[,1]))
ylim <- range(c(z[,,2], b[,2]))
plot.lsm(alpha[1], z[,1,], add=F, col=1, xlim=xlim, ylim=ylim)
for(i in 2:dim(Z)[3]){
plot.lsm(alpha[i], z[,i,], add=T, col=i)
}
}
plot.model(two.ovals.model)
plot.lsm <- function(alpha, z, add=F, col="black", xlim=c(-2,2), ylim=c(-2,2)){
edges <- positions.to.matrix(alpha, z)==1 # => logical
if(add){
points(z, col=col)
} else {
plot(z, col=col, xlim=xlim, ylim=ylim)
}
N <- nrow(z)
for(i in 1:N){
for(j in 1:N){
if(edges[i,j]){
lines(z[c(i,j),1], z[c(i,j),2], col=col)
}
}
}
}
plot.model(two.ovals.model)
plot.model <- function(m, alpha=F){
z <- m$z.hat$z
b <- m$z.hat$b
if(!alpha)
alpha <- m$z.hat$alpha
# First, make sure the plot is big enough
xlim <- range(c(z[,,1], b[,1]))
ylim <- range(c(z[,,2], b[,2]))
plot.lsm(alpha[1], z[,1,], add=F, col=1, xlim=xlim, ylim=ylim)
for(i in 2:dim(z)[3]){
plot.lsm(alpha[i], z[,i,], add=T, col=i)
}
}
plot.model(two.ovals.model)
plot.model(two.ovals.model, alpha=c(.1, .1))
is.null(NULL)
is.null(1:3)
plot.model <- function(m, alpha=NULL){
z <- m$z.hat$z
b <- m$z.hat$b
if(is.null(alpha))
alpha <- m$z.hat$alpha
# First, make sure the plot is big enough
xlim <- range(c(z[,,1], b[,1]))
ylim <- range(c(z[,,2], b[,2]))
plot.lsm(alpha[1], z[,1,], add=F, col=1, xlim=xlim, ylim=ylim)
for(i in 2:dim(z)[3]){
plot.lsm(alpha[i], z[,i,], add=T, col=i)
}
}
plot.model(two.ovals.model, alpha=c(.1, .1))
plot.model(two.ovals.model, alpha=c(1, 1))
par(mar=c(5,4,1,1))
plot.model(two.ovals.model, alpha=c(1, 1))
two.ovals.model$z.hat$alpha
one.shot <- function(edges, sigma, file, model_name, iter){
N <- dim(edges)[1]
K <- dim(edges)[3]
if(file=="hlsm.stan"){
sigmat <- array(0, dim=c(K,2,2))
sigmat[,1,1] <- sigma
sigmat[,2,2] <- sigma
} else {
sigmat <- array(sigma, dim=c(K,2))
}
hlsm.data <- list(N=N,
K=K,
edges=edges,     # make sure these are ints  (not bool) else FLATTENED
sigma_alpha=10,   # NO idea what these should be, using mvlsm's
mu_b=c(0,0),
sigma_b=sigma*diag(2), # [s   0; 0   s] (one matrix)
sigma_z=sigmat)        # [s_k 0; 0 s_k] (one matrix per layer)
hlsm.init <- find.init(edges)
fit <- stan(file=file,
model_name=model_name,
iter=iter,
data=hlsm.data,
init=hlsm.init,
verbose=T,
control=list(max_treedepth = 15))
theta <- unpack.hlsm.fit(fit, N, K)
return(list(fit=fit, theta=theta, init=hlsm.init()))
}
plot.model(three.ovals.model)
plot.lsm(three.ovals[,,1])
three.ovals.model <- one.shot(three.ovals, sigma, "hlsm.stan", "three_ovals", 5e3)
plot.model(three.ovals.model) # oh VERY interesting -- what the hell?
plot.model <- function(m, alpha=NULL, xlim=NULL, ylim=NULL){
z <- m$theta$z
b <- m$theta$b
if(is.null(alpha))
alpha <- m$theta$alpha
# First, make sure the plot is big enough
if(is.null(xlim))
xlim <- range(c(z[,,1], b[,1]))
if(is.null(ylim))
ylim <- range(c(z[,,2], b[,2]))
plot.lsm(alpha[1], z[,1,], add=F, col=1, xlim=xlim, ylim=ylim)
for(i in 2:dim(z)[3]){
plot.lsm(alpha[i], z[,i,], add=T, col=i)
}
}
plot.model(three.ovals.model, xlim=c(-2,2), ylim=c(-2,2)) # oh VERY interesting -- what the hell?
plot.model(three.ovals.model, alpha=c(.1, .1, .1), xlim=c(-1,1), ylim=c(-1,1)) # oh VERY interesting -- what the hell?
plot.model <- function(m, alpha=NULL, xlim=NULL, ylim=NULL){
z <- m$theta$z
b <- m$theta$b
if(is.null(alpha))
alpha <- m$theta$alpha
# First, make sure the plot is big enough
if(is.null(xlim))
xlim <- range(c(z[,,1], b[,1]))
if(is.null(ylim))
ylim <- range(c(z[,,2], b[,2]))
plot.lsm(alpha[1], z[,1,], add=F, col=1, xlim=xlim, ylim=ylim)
for(i in 2:dim(z)[2]){
plot.lsm(alpha[i], z[,i,], add=T, col=i)
}
}
plot.model(three.ovals.model, alpha=c(.1, .1, .1), xlim=c(-1,1), ylim=c(-1,1)) # oh VERY interesting -- what the hell?
plot.model(three.ovals.model, alpha=c(.15, .15, .15), xlim=c(-1,1), ylim=c(-1,1)) # oh VERY interesting -- what the hell?
three.ovals.model <- one.shot(three.ovals, sigma, "hlsm.stan", "three_ovals", 2e4)
plot.model(three.ovals.model, alpha=c(.15, .15, .15), xlim=c(-1,1), ylim=c(-1,1)) # oh VERY interesting -- what the hell?
plot.model(three.ovals.model, alpha=c(.10, .10, .10), xlim=c(-1,1), ylim=c(-1,1)) # oh VERY interesting -- what the hell?
traceplot(three.ovals.model$fit, "lp__")
plot.lsm(stretch(b, 2, dim="x"))
plot.lsm(alpha=1, stretch(b, 2, dim="x"))
plot.lsm(alpha=1, stretch(b, 2, dim="x"))
plot.lsm(alpha=1, stretch(b, 2, dim="y"))
plot.lsm(alpha=1, rotate.45(stretch(b, 2, dim="y")))
plot.lsm(1, b)
# what the fuck?
b
# oh for --
N <- 20
circle <- seq(0,2*pi,length=N)
b <- cbind(cos(circle), sin(circle))
niter <- 1e3
sigma <- 10
plot.lsm(alpha=1, stretch(b, 2, dim="x"))
plot.lsm(alpha=1, stretch(b, 2, dim="y"))
plot.lsm(alpha=1, rotate.45(stretch(b, 2, dim="y")))
three.ovals <- positions.to.multigraph(list(stretch(b, 2, dim="x"),
stretch(b, 2, dim="y"),
rotate.45(stretch(b, 2, dim="y"))))
three.ovals.model <- one.shot(three.ovals, sigma, "hlsm.stan", "three_ovals", 2e4)
plot.model(three.ovals.model, alpha=c(.10, .10, .10), xlim=c(-1,1), ylim=c(-1,1)) # oh VERY interesting -- what the hell?
plot.model(three.ovals.model, alpha=c(.12, .12, .12), xlim=c(-1,1), ylim=c(-1,1)) # oh VERY interesting -- what the hell?
a <- .15
plot.model(three.ovals.model, alpha=a,#c(.12, .12, .12),
xlim=c(-1,1), ylim=c(-1,1)) # oh VERY interesting -- what the hell?
plot.model(three.ovals.model, alpha=rep(a,3),#c(.12, .12, .12),
xlim=c(-1,1), ylim=c(-1,1)) # oh VERY interesting -- what the hell?
a <- .17
plot.model(three.ovals.model, alpha=rep(a,3),#c(.12, .12, .12),
xlim=c(-1,1), ylim=c(-1,1)) # oh VERY interesting -- what the hell?
plot.model(three.ovals.model, alpha=c(.12, .08, .12),
xlim=c(-1,1), ylim=c(-1,1)) # oh VERY interesting -- what the hell?
plot.model(three.ovals.model, alpha=c(.12, .09, .12),
xlim=c(-1,1), ylim=c(-1,1)) # oh VERY interesting -- what the hell?
plot.model(three.ovals.model, alpha=c(.12, .1, .12),
xlim=c(-1,1), ylim=c(-1,1)) # oh VERY interesting -- what the hell?
three.ovals <- positions.to.multigraph(list(stretch(b, 2, dim="x"),
stretch(b, 2, dim="y"),
rotate.45(stretch(b, 2, dim="y"))))
rotate.60 <- rotation.matrix(pi/3)
rotate <- function(x, theta){
f <- rotation.matrix(theta)
return(f(x))
}
plot(rotate(stretch(b,2),pi/2))
plot(rotate(stretch(b,2),pi/3))
three.ovals <- positions.to.multigraph(list(stretch(b, 2, dim="y"),
rotate(stretch(b, 2, dim="y"), pi/3),
rotate(stretch(b, 2, dim="y"),-pi/3)))
three.ovals.model <- one.shot(three.ovals, sigma, "hlsm.stan", "three_ovals", 1e5)
s <- summary(three.ovals.model)
View(s$summary)
s
s <- summary(three.ovals.model$fit)
View(s$summary)
names(three.ovals.model$fit)
tom <- (three.ovals.model$fit)
View(tom)
unpack.hlsm.fit <- function(fit, N, K){
# s <- summary(fit)$summary[,"mean"]
s <- fit[which.max(fit$lp__),]
params <- t(array(s, dim=c(K, 1+N+N*K))) # => one k-dim'nl param per line, CUTS lp__
return(list(alpha=params[1,],
b=params[2:(N+1),],
# => z[N,K,2], i.e. nodes, layers, x/y coords.
z=aperm(array(params[(N+2):(1+N+N*2),], # This is UGLY, but works
dim=c(K,N,2)),
c(2,1,3))))
}
z.hat <- unpack.hlsm.fit(three.ovals.model$fit, N, 3)
head(three.ovals.model$fit[,"lp__"])
head(three.ovals.model$fit@lp__)
unpack.hlsm.fit <- function(fit, N, K){
# s <- summary(fit)$summary[,"mean"]
s <- fit[which.max(as.matrix(fit)[,"lp__"]),]
params <- t(array(s, dim=c(K, 1+N+N*K))) # => one k-dim'nl param per line, CUTS lp__
return(list(alpha=params[1,],
b=params[2:(N+1),],
# => z[N,K,2], i.e. nodes, layers, x/y coords.
z=aperm(array(params[(N+2):(1+N+N*2),], # This is UGLY, but works
dim=c(K,N,2)),
c(2,1,3))))
}
head(three.ovals.model$fit[,"lp__"])
z.hat <- unpack.hlsm.fit(three.ovals.model$fit, N, 3)
unpack.hlsm.fit <- function(fit, N, K){
# s <- summary(fit)$summary[,"mean"]
draws <- as.matrix(fit)
s <- draws[which.max(draws[,"lp__"]),]
params <- t(array(s, dim=c(K, 1+N+N*K))) # => one k-dim'nl param per line, CUTS lp__
return(list(alpha=params[1,],
b=params[2:(N+1),],
# => z[N,K,2], i.e. nodes, layers, x/y coords.
z=aperm(array(params[(N+2):(1+N+N*2),], # This is UGLY, but works
dim=c(K,N,2)),
c(2,1,3))))
}
z.hat <- unpack.hlsm.fit(three.ovals.model$fit, N, 3)
names(z.hat)
plot.multigraph(z.hat$z)
z.hat$z
plot.lsm(z.hat$z[,,1])
plot.lsm(1, z.hat$z[,,1])
plot(z.hat$z[,,1])
plot(z.hat$z[,,2])
plot(z.hat$z[,,3])
dim(three.ovals)
dim(z.hat$z)
plot(z.hat$z[,1,])
plot(z.hat$z[,2,])
plot(z.hat$z[,3,])
plot(from_adjacency(three.ovals[,,1]))
plot(graph_from_adjacency_matrix(three.ovals[,,1]))
plot(graph_from_adjacency_matrix(three.ovals[,,2]))
plot(graph_from_adjacency_matrix(three.ovals[,,3]))
plot.multigraph(z.hat$z) # -- what
plot.model(three.ovals.model, alpha=c(.12, .1, .12),
xlim=c(-1,1), ylim=c(-1,1)) # oh VERY interesting -- what the hell?
plot.model <- function(m, alpha=NULL, xlim=NULL, ylim=NULL){
z <- m$theta$z
b <- m$theta$b
if(is.null(alpha))
alpha <- m$theta$alpha
# First, make sure the plot is big enough
if(is.null(xlim))
xlim <- range(c(z[,,1], b[,1]))
if(is.null(ylim))
ylim <- range(c(z[,,2], b[,2]))
plot.lsm(alpha=1,  b,      add=F, col=2, xlim=xlim, ylim=ylim)
# plot.lsm(alpha[1], z[,1,], add=T, col=2, xlim=xlim, ylim=ylim)
for(i in 1:dim(z)[2]){
plot.lsm(alpha[i], z[,i,], add=T, col=i+1)
}
}
plot.model(three.ovals.model, alpha=c(.12, .1, .12),
xlim=c(-1,1), ylim=c(-1,1)) # oh VERY interesting -- what the hell?
plot.model <- function(m, alpha=NULL, xlim=NULL, ylim=NULL){
z <- m$theta$z
b <- m$theta$b
if(is.null(alpha))
alpha <- m$theta$alpha
# First, make sure the plot is big enough
if(is.null(xlim))
xlim <- range(c(z[,,1], b[,1]))
if(is.null(ylim))
ylim <- range(c(z[,,2], b[,2]))
plot.lsm(alpha=.1,  b,      add=F, col=1, xlim=xlim, ylim=ylim)
# plot.lsm(alpha[1], z[,1,], add=T, col=2, xlim=xlim, ylim=ylim)
for(i in 1:dim(z)[2]){
plot.lsm(alpha[i], z[,i,], add=T, col=i+1)
}
}
plot.model(three.ovals.model, alpha=c(.12, .1, .12),
xlim=c(-1,1), ylim=c(-1,1)) # oh VERY interesting -- what the hell?
model.accuracy <- function(edges, m, alpha=NULL){
K <- dim(edges)[3]
if(length(alpha)!=K)
alpha <- rep(alpha, K)
for(i in 1:dim(edges)[3]){
g.hat <- positions.to.matrix(alpha[i], m$theta$z[,i,])
tbl <- table(as.vector(g.hat), as.vector(edges[,,i]))
print(tbl)
}
}
model.accuracy <- function(edges, m, alpha=NULL){
K <- dim(edges)[3]
if(length(alpha)!=K)
alpha <- rep(alpha, K)
for(i in 1:dim(edges)[3]){
g.hat <- positions.to.matrix(alpha[i], m$theta$z[,i,])
tbl <- table(as.vector(g.hat), as.vector(edges[,,i]))
print(tbl)
}
}
dim(two.circles)
model.accuracy(two.circles, two.circles.model)
model.accuracy <- function(edges, m, alpha=NULL){
K <- dim(edges)[3]
if(is.null(alpha))
alpha <- 1
if(length(alpha)!=K)
alpha <- rep(alpha, K)
for(i in 1:dim(edges)[3]){
g.hat <- positions.to.matrix(alpha[i], m$theta$z[,i,])
tbl <- table(as.vector(g.hat), as.vector(edges[,,i]))
print(tbl)
}
}
model.accuracy(two.circles, two.circles.model)
two.circles.model$theta$z
two.ovals <- positions.to.multigraph(list(stretch(b, 2, dim="x"),
stretch(b, 2, dim="y")))
two.ovals.model <- one.shot(two.ovals, sigma, "hlsm.stan", "two_ovals", niter)
plot.model(two.ovals.model)
unpack.hlsm.fit <- function(fit, N, K){
# s <- summary(fit)$summary[,"mean"]
draws <- as.matrix(fit)
s <- draws[which.min(draws[,"lp__"]),]
params <- t(array(s, dim=c(K, 1+N+N*K))) # => one k-dim'nl param per line, CUTS lp__
return(list(alpha=params[1,],
b=params[2:(N+1),],
# => z[N,K,2], i.e. nodes, layers, x/y coords.
z=aperm(array(params[(N+2):(1+N+N*2),], # This is UGLY, but works
dim=c(K,N,2)),
c(2,1,3))))
}
plot.model(two.ovals.model)
two.ovals.model <- one.shot(two.ovals, sigma, "hlsm.stan", "two_ovals", niter)
plot.model(two.ovals.model)
unpack.hlsm.fit <- function(fit, N, K){
# s <- summary(fit)$summary[,"mean"]
draws <- as.matrix(fit)
s <- draws[which.max(draws[,"lp__"]),]
params <- t(array(s, dim=c(K, 1+N+N*K))) # => one k-dim'nl param per line, CUTS lp__
return(list(alpha=params[1,],
b=params[2:(N+1),],
# => z[N,K,2], i.e. nodes, layers, x/y coords.
z=aperm(array(params[(N+2):(1+N+N*2),], # This is UGLY, but works
dim=c(K,N,2)),
c(2,1,3))))
}
plot.model <- function(m, alpha=NULL, xlim=NULL, ylim=NULL){
z <- m$theta$z
b <- m$theta$b
if(is.null(alpha))
alpha <- m$theta$alpha
# First, make sure the plot is big enough
if(is.null(xlim))
xlim <- range(c(z[,,1], b[,1]))
if(is.null(ylim))
ylim <- range(c(z[,,2], b[,2]))
plot.lsm(alpha=.1,  b,      add=F, col=1, xlim=xlim, ylim=ylim)
# plot.lsm(alpha[1], z[,1,], add=T, col=2, xlim=xlim, ylim=ylim)
for(i in 1:dim(z)[2]){
plot.lsm(alpha[i], z[,i,], add=T, col=i+1)
}
}
model.accuracy(two.circles, two.circles.model)
two.ovals.model <- one.shot(two.ovals, sigma, "hlsm.stan", "two_ovals", 2e4)
