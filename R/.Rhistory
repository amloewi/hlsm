result.opt <- run.optimization(b, epsilon, y, lambda = 10)
result.opt$epsilon
b <- ovals.init$b
n <- dim(b)[1]
K <- dim(ovals.init$z)[3]
epsilon <- ovals.init$z - array(b, dim=c(dim(b), K))
y <- two.ovals
result.opt <- run.optimization(b, epsilon, y, lambda = 1)
result.opt$epsilon
source('~/GoogleDrive/CMU/CLASSES/36725/project/hlsm/R/final_project.R', echo=TRUE)
b <- ovals.init$b
n <- dim(b)[1]
K <- dim(ovals.init$z)[3]
epsilon <- ovals.init$z - array(b, dim=c(dim(b), K))
y <- two.ovals
list.obj.value <- list()
lambda.values <- c(0.1, 1, 10, 100)
for (i in 1:length(lambda.values)){
result.opt <- run.optimization(b, epsilon, y, lambda = 1)
list.obj.value[[i]] <- result.opt$obj.value
}
b <- ovals.init$b
n <- dim(b)[1]
K <- dim(ovals.init$z)[3]
epsilon <- ovals.init$z - array(b, dim=c(dim(b), K))
y <- two.ovals
list.obj.value <- list()
lambda.values <- c(0.1, 1, 10, 100)
for (i in 1:length(lambda.values)){
result.opt <- run.optimization(b, epsilon, y, lambda = lambda.values[i])
list.obj.value[[i]] <- result.opt$obj.value
}
b <- ovals.init$b
n <- dim(b)[1]
K <- dim(ovals.init$z)[3]
epsilon <- ovals.init$z - array(b, dim=c(dim(b), K))
y <- two.ovals
list.results <- list()
lambda.values <- c(0.1, 1, 10, 100)
for (i in 1:length(lambda.values)){
result.opt <- run.optimization(b, epsilon, y, lambda = lambda.values[i])
list.results[[i]] <- result.opt
}
list.results[[1]]$epsilon
list.results[[2]]$epsilon
list.results[[3]]$epsilon
library(ggplot2)
n.steps <- length(list.results[[1]]$obj.value)
df.obj.values <- data.frame(matrix(NA,nrow=n.steps,
ncol=length(lambda.values)))
names(df.obj.values) <- lambda.values
library(plyr)
library(dplyr)
library(tidyr)
? gather
df.obj.values <- gather(df.obj.values, lambda, value, '01':'100')
df.obj.values <- gather(df.obj.values, lambda, value, '0.1':'100')
df.obj.values <- gather(df.obj.values, lambda, value, `0.1`:`100`)
df.obj.values
df.obj.values <- data.frame(matrix(NA,nrow=n.steps,
ncol=length(lambda.values)))
names(df.obj.values) <- lambda.values
for (i in 1:length(lambda.values)) {
df.obj.values[,i] <- list.results[[i]]$obj.value
}
df.obj.values <- gather(df.obj.values, lambda, value, `0.1`:`100`)
df.obj.values
df.obj.values <- data.frame(matrix(NA,nrow=n.steps,
ncol=length(lambda.values)))
names(df.obj.values) <- lambda.values
for (i in 1:length(lambda.values)) {
df.obj.values[,i] <- list.results[[i]]$obj.value
}
df.obj.values$step <- 1:nrow(df.obj.values)
df.obj.values <- gather(df.obj.values, lambda, value, `0.1`:`100`)
df.obj.values <- data.frame(matrix(NA,nrow=n.steps,
ncol=length(lambda.values)))
names(df.obj.values) <- lambda.values
for (i in 1:length(lambda.values)) {
df.obj.values[,i] <- list.results[[i]]$obj.value
}
df.obj.values$step <- 1:nrow(df.obj.values)
df.obj.values <- gather(df.obj.values, lambda, value, `0.1`:`100`, factor_key=TRUE)
? geom_line
g1 <- ggplot() + geom_line(data=df.obj.values, aes(x=step, y=value, linetype=lambda))
g1
g1 <- ggplot() + geom_line(data=df.obj.values,
aes(x=step, y=value, linetype=lambda))
g1 <- g1 + theme_bw() + scale_y_continuous(trans=log())
? scale_y_continuous
g1 <- ggplot() + geom_line(data=df.obj.values,
aes(x=step, y=value, linetype=lambda))
g1 <- g1 + theme_bw() + scale_y_continuous(trans='log')
g1
K
z <- array(list.results[[2]]$b, dim=c(dim(list.results[[2]]$b), K)) + list.results[[2]]$epsilon
z
b < list.results[[2]]$b
b <- list.results[[2]]$b
z
b
plot.positions(z, b, alpha=0.3)
plot.positions(z, b, alpha=0.7)
plot.positions(z, b, alpha=0.8)
plot.positions(z, b, alpha=1)
plot.positions(z, b, alpha=1.5)
plot.errros(z, be)
plot.errros(z, be)
plot.errros(z, b)
plot.errors(z, b)
g1 <- ggplot() + geom_line(data=df.obj.values,
aes(x=step, y=value, linetype=lambda))
g1 <- g1 + theme_bw() + scale_y_continuous(trans='log') +
theme(axis.text.y = element_blank())
G1
g1
g1 <- ggplot() + geom_line(data=df.obj.values,
aes(x=step, y=value, linetype=lambda))
g1 <- g1 + theme_bw() + scale_y_continuous(trans='log') +
theme(axis.text.y = element_blank()) + ylab('Log Obj Function')
g1
getwd()
g1 <- ggplot() + geom_line(data=df.obj.values,
aes(x=step, y=value, linetype=lambda))
g1 <- g1 + theme_bw() + scale_y_continuous(trans='log') +
theme(axis.text.y = element_blank()) + ylab('Log Obj Function') +
xlab('iteration')
g1
g1 <- ggplot() + geom_line(data=df.obj.values,
aes(x=step, y=value, linetype=lambda))
g1 <- g1 + theme_bw() + scale_y_continuous(trans='log') +
theme(axis.text.y = element_blank(), legend.position=c(0.95,0.95),
legend.justification=c(1,1)) + ylab('Log Obj Function') +
xlab('iteration')
g1
? png
png('plot_objective.png', res=300, width=18, height=9, unit="in")
print(g1)
dev.off()
png('plot_objective.png', res=200, width=18, height=9, unit="in")
print(g1)
dev.off()
png('plot_objective.png', res=300, width=9, height=4.5, unit="in")
print(g1)
dev.off()
png('plot_objective.png', res=300, width=9, height=3, unit="in")
print(g1)
dev.off()
? plot
plot.lsm <- function(alpha, z, add=F, col="black", xlim=c(-2,2), ylim=c(-2,2)){
edges <- positions.to.matrix(alpha, z)==1 # => logical
if(add){
points(z, col=col)
} else {
plot(z, col=col, xlim=xlim, ylim=ylim)
}
N <- nrow(z)
for(i in 1:N){
for(j in 1:N){
if(edges[i,j]){
lines(z[c(i,j),1], z[c(i,j),2], col=col, xlab='', ylab='')
}
}
}
}
plot.positions <- function(z, b, alpha=NULL, xlim=NULL, ylim=NULL){
# First, make sure the plot is big enough
if(is.null(xlim))
xlim <- range(c(z[,,1], b[,1]))
if(is.null(ylim))
ylim <- range(c(z[,,2], b[,2]))
if(is.null(alpha)) alpha <- 5
if(length(alpha)!=z[2])
alpha <- rep(alpha, dim(z)[2]+1)
plot.lsm(alpha[1], b, add=F, col=1, xlim=xlim, ylim=ylim)
for(i in 1:dim(z)[2]){
plot.lsm(alpha[i+1], z[,i,], add=T, col=i+1)
}
}
? par
compute.z <- function(b, epsilon) {
K <- dim(epsilon)[3]
z <- array(b, dim=c(dim(b), K)) + epsilon
return(z)
}
par()
b <- ovals.init$b
n <- dim(b)[1]
K <- dim(ovals.init$z)[3]
epsilon <- ovals.init$z - array(b, dim=c(dim(b), K))
png('plot_positions.png', res=300, width=9, height=4.5, unit="in")
par(mfrow=c(1, 2), mar=c(2, 2, 2, 1)+0.1)
plot.positions(z, b, alpha=1)
b.new <- list.results[[2]]$b
z.new <- array(list.results[[2]]$b, dim=c(dim(list.results[[2]]$b), K)) +
list.results[[2]]$epsilon
plot.positions(z.new, b.new, alpha=1)
dev.off()
source('../hlsm_sim.R')
source('~/GoogleDrive/CMU/CLASSES/36725/project/hlsm/R/final_project.R', echo=TRUE)
source('~/GoogleDrive/CMU/CLASSES/36725/project/hlsm/R/final_project.R', echo=TRUE)
source('../hlsm_sim.R')
dev.off()
dev.off()
source('../hlsm_sim.R')
plot.new()
source('../hlsm_sim.R')
plot.positions(ovals.init$z, ovals.init$b, ovals.init$alpha)
b <- ovals.init$b
n <- dim(b)[1]
K <- dim(ovals.init$z)[3]
epsilon <- ovals.init$z - array(b, dim=c(dim(b), K))
y <- two.ovals
list.results <- list()
lambda.values <- c(0.1, 1, 10, 100)
for (i in 1:length(lambda.values)){
result.opt <- run.optimization(b, epsilon, y, lambda = lambda.values[i])
list.results[[i]] <- result.opt
}
library(ggplot2)
library(plyr)
library(dplyr)
library(tidyr)
n.steps <- length(list.results[[1]]$obj.value)
df.obj.values <- data.frame(matrix(NA,nrow=n.steps,
ncol=length(lambda.values)))
names(df.obj.values) <- lambda.values
for (i in 1:length(lambda.values)) {
df.obj.values[,i] <- list.results[[i]]$obj.value
}
df.obj.values$step <- 1:nrow(df.obj.values)
df.obj.values <- gather(df.obj.values, lambda, value, `0.1`:`100`, factor_key=TRUE)
g1 <- ggplot() + geom_line(data=df.obj.values,
aes(x=step, y=value, linetype=lambda))
g1 <- g1 + theme_bw() + scale_y_continuous(trans='log') +
theme(axis.text.y = element_blank(), legend.position=c(0.95,0.95),
legend.justification=c(1,1)) + ylab('Log Obj Function') +
xlab('iteration')
png('plot_objective.png', res=300, width=9, height=3, unit="in")
print(g1)
dev.off()
compute.z <- function(b, epsilon) {
K <- dim(epsilon)[3]
z <- array(b, dim=c(dim(b), K)) + epsilon
return(z)
}
z <- ovals.init$z
png('plot_positions.png', res=300, width=9, height=4.5, unit="in")
par(mfrow=c(1, 2), mar=c(2, 2, 2, 1)+0.1)
z <- ovals.init$z
plot.positions(z, b, alpha=1)
b.new <- list.results[[2]]$b
z.new <- array(list.results[[2]]$b, dim=c(dim(list.results[[2]]$b), K)) +
list.results[[2]]$epsilon
plot.positions(z.new, b.new, alpha=1)
dev.off()
par(mfrow=c(1, 2), mar=c(2, 2, 2, 1)+0.1)
z <- ovals.init$z
plot.positions(z, b, alpha=1)
b.new <- list.results[[2]]$b
z.new <- array(list.results[[4]]$b, dim=c(dim(list.results[[4]]$b), K)) +
list.results[[2]]$epsilon
plot.positions(z.new, b.new, alpha=1)
dev.off()
par(mfrow=c(1, 2), mar=c(2, 2, 2, 1)+0.1)
z <- ovals.init$z
plot.positions(z, b, alpha=1)
b.new <- list.results[[4]]$b
z.new <- array(list.results[[4]]$b, dim=c(dim(list.results[[4]]$b), K)) +
list.results[[4]]$epsilon
plot.positions(z.new, b.new, alpha=1)
list.results[[4]]$epsilon
list.results[[4]]$b
b.new
z.new
plot(b[,1], b[,2])
plot(b.new[,1], b.new[,2])
plot(z.new[,1,1], z.new[,2,1])
dim(z)
plot.positions <- function(z, b, alpha=NULL, xlim=NULL, ylim=NULL){
# First, make sure the plot is big enough
if(is.null(xlim))
xlim <- range(c(z[,,1], b[,1]))
if(is.null(ylim))
ylim <- range(c(z[,,2], b[,2]))
if(is.null(alpha)) alpha <- 5
if(length(alpha)!=z[2])
alpha <- rep(alpha, dim(z)[2]+1)
plot.lsm(alpha[1], b, add=F, col=1, xlim=xlim, ylim=ylim)
for(i in 1:dim(z)[3]){
#plot.lsm(alpha[i+1], z[,i,], add=T, col=i+1)
plot.lsm(alpha[i+1], z[ , ,i], add=T, col=i+1)
}
}
dev.off()
par(mfrow=c(1, 2), mar=c(2, 2, 2, 1)+0.1)
z <- ovals.init$z
plot.positions(z, b, alpha=1)
b.new <- list.results[[4]]$b
z.new <- array(list.results[[4]]$b, dim=c(dim(list.results[[4]]$b), K)) +
list.results[[4]]$epsilon
plot.positions(z.new, b.new, alpha=1)
dev.off()
par(mfrow=c(1, 2), mar=c(2, 2, 2, 1)+0.1)
z <- ovals.init$z
plot.positions(z, b, alpha=1)
b.new <- list.results[[2]]$b
z.new <- array(list.results[[2]]$b, dim=c(dim(list.results[[2]]$b), K)) +
list.results[[2]]$epsilon
plot.positions(z.new, b.new, alpha=1)
par(mfrow=c(1, 2), mar=c(2, 2, 2, 1)+0.1)
z <- ovals.init$z
plot.positions(z, b, alpha=1)
b.new <- list.results[[1]]$b
z.new <- array(list.results[[1]]$b, dim=c(dim(list.results[[1]]$b), K)) +
list.results[[1]]$epsilon
plot.positions(z.new, b.new, alpha=1)
? plot
? par
plot.lsm <- function(alpha, z, add=F, col="black", xlim=c(-2,2), ylim=c(-2,2)){
edges <- positions.to.matrix(alpha, z)==1 # => logical
if(add){
points(z, col=col)
} else {
plot(z, col=col, xlim=xlim, ylim=ylim, xaxt='n', yaxt='n')
}
N <- nrow(z)
for(i in 1:N){
for(j in 1:N){
if(edges[i,j]){
lines(z[c(i,j),1], z[c(i,j),2], col=col, xlab='', ylab='')
}
}
}
}
par(mfrow=c(2, 2), mar=c(2, 2, 2, 1)+0.1)
z <- ovals.init$z
plot.positions(z, b, alpha=1)
b.new <- list.results[[1]]$b
z.new <- array(list.results[[1]]$b, dim=c(dim(list.results[[1]]$b), K)) +
list.results[[1]]$epsilon
plot.positions(z.new, b.new, alpha=1)
? par
source('~/GoogleDrive/CMU/CLASSES/36725/project/hlsm/R/final_project.R', echo=TRUE)
source('../hlsm_sim.R')
? aperm
b <- ovals.init$b
b <- ovals.init$b
n <- dim(b)[1]
# ovals.init$z is (n,K,2)
z <- ovals.init$z
z <- aperm(z, c(1, 3, 2)) # permute to (n, 2, K)
K <- dim(ovals.init$z)[3]
epsilon <-  z - array(b, dim=c(dim(b), K))
y <- two.ovals
epsilon
list.results <- list()
lambda.values <- c(0.1, 1, 10, 100)
for (i in 1:length(lambda.values)){
result.opt <- run.optimization(b, epsilon, y, lambda = lambda.values[i])
list.results[[i]] <- result.opt
}
library(ggplot2)
library(plyr)
library(dplyr)
library(tidyr)
n.steps <- length(list.results[[1]]$obj.value)
df.obj.values <- data.frame(matrix(NA,nrow=n.steps,
ncol=length(lambda.values)))
names(df.obj.values) <- lambda.values
for (i in 1:length(lambda.values)) {
df.obj.values[,i] <- list.results[[i]]$obj.value
}
df.obj.values$step <- 1:nrow(df.obj.values)
df.obj.values <- gather(df.obj.values, lambda, value, `0.1`:`100`, factor_key=TRUE)
g1 <- ggplot() + geom_line(data=df.obj.values,
aes(x=step, y=value, linetype=lambda))
g1 <- g1 + theme_bw() + scale_y_continuous(trans='log') +
theme(axis.text.y = element_blank(), legend.position=c(0.95,0.95),
legend.justification=c(1,1)) + ylab('Log Obj Function') +
xlab('iteration')
g1
par(mfrow=c(2, 2), mar=c(2, 1, 2, 1)+0.1)
plot.positions(z, b, alpha=1)
for (i in 1:(length(lambda.values)-1)) {
b.new <- list.results[[1]]$b
z.new <- array(list.results[[1]]$b, dim=c(dim(list.results[[1]]$b), K)) +
list.results[[1]]$epsilon
plot.positions(z.new, b.new, alpha=1)
}
dev.off()
? saveRDS
saveRDS(df.obj.values, file='objective_values.rds')
par(mfrow=c(2, 2), mar=c(2, 1, 2, 1)+0.1)
plot.positions(z, b, alpha=1)
for (i in 1:(length(lambda.values)-1)) {
b.new <- list.results[[i]]$b
z.new <- array(list.results[[i]]$b, dim=c(dim(list.results[[i]]$b), K)) +
list.results[[i]]$epsilon
plot.positions(z.new, b.new, alpha=1)
}
par(mfrow=c(2, 2), mar=c(2, 1, 2, 1)+0.1)
plot.positions(z, b, alpha=1)
for (i in 1:(length(lambda.values)-1)) {
b.new <- list.results[[i]]$b
z.new <- array(list.results[[i]]$b, dim=c(dim(list.results[[i]]$b), K)) +
list.results[[i]]$epsilon
plot.positions(z.new, b.new, alpha=1.5)
}
par(mfrow=c(2, 2), mar=c(0, 0, 0, 0)+0.1)
plot.positions(z, b, alpha=1)
for (i in 1:(length(lambda.values)-1)) {
b.new <- list.results[[i]]$b
z.new <- array(list.results[[i]]$b, dim=c(dim(list.results[[i]]$b), K)) +
list.results[[i]]$epsilon
plot.positions(z.new, b.new, alpha=1.5)
}
par(mfrow=c(2, 2), mar=c(0, 0, 0, 0)+0.1)
plot.positions(z, b, alpha=1)
for (i in 1:(length(lambda.values)-1)) {
b.new <- list.results[[i]]$b
z.new <- array(list.results[[i]]$b, dim=c(dim(list.results[[i]]$b), K)) +
list.results[[i]]$epsilon
plot.positions(z.new, b.new, alpha=2)
}
par(mfrow=c(2, 2), mar=c(0, 0, 0, 0)+0.1)
plot.positions(z, b, alpha=1)
for (i in 1:(length(lambda.values)-1)) {
b.new <- list.results[[i]]$b
z.new <- array(list.results[[i]]$b, dim=c(dim(list.results[[i]]$b), K)) +
list.results[[i]]$epsilon
plot.positions(z.new, b.new, alpha=3)
}
par(mfrow=c(2, 2), mar=c(0, 0, 1, 0)+0.1)
plot.positions(z, b, alpha=1)
for (i in 1:(length(lambda.values)-1)) {
b.new <- list.results[[i]]$b
z.new <- array(list.results[[i]]$b, dim=c(dim(list.results[[i]]$b), K)) +
list.results[[i]]$epsilon
plot.positions(z.new, b.new, alpha=1.5)
}
par(mfrow=c(2, 2), mar=c(0, 0, 1, 0)+0.1)
plot.positions(z, b, alpha=1)
for (i in 1:(length(lambda.values)-1)) {
b.new <- list.results[[i]]$b
z.new <- array(list.results[[i]]$b, dim=c(dim(list.results[[i]]$b), K)) +
list.results[[i]]$epsilon
plot.positions(z.new, b.new, alpha=1)
}
par(mfrow=c(2, 2), mar=c(0, 0, 1, 0)+0.1)
plot.positions(z, b, alpha=1)
for (i in 1:(length(lambda.values)-1)) {
b.new <- list.results[[i]]$b
z.new <- array(list.results[[i]]$b, dim=c(dim(list.results[[i]]$b), K)) +
list.results[[i]]$epsilon
plot.positions(z.new, b.new, alpha=1.5)
}
png('plot_positions.png', res=300, width=9, height=4.5, unit="in")
par(mfrow=c(2, 2), mar=c(0, 0, 1, 0)+0.1)
plot.positions(z, b, alpha=1)
for (i in 1:(length(lambda.values)-1)) {
b.new <- list.results[[i]]$b
z.new <- array(list.results[[i]]$b, dim=c(dim(list.results[[i]]$b), K)) +
list.results[[i]]$epsilon
plot.positions(z.new, b.new, alpha=1.5)
}
dev.off()
? plotmath
? bquote
par(mfrow=c(2, 2), mar=c(0, 0, 1, 0)+0.1)
plot.positions(z, b, alpha=1, main='Initial Positions')
for (i in 1:(length(lambda.values)-1)) {
b.new <- list.results[[i]]$b
z.new <- array(list.results[[i]]$b, dim=c(dim(list.results[[i]]$b), K)) +
list.results[[i]]$epsilon
plot.positions(z.new, b.new, alpha=1.5)
title(main=bquote(lambda == .(lambda.values[i])))
}
dev.off()
par(mfrow=c(2, 2), mar=c(0, 0, 1, 0)+0.1)
plot.positions(z, b, alpha=1)
title(main='Initial Positions')
for (i in 1:(length(lambda.values)-1)) {
b.new <- list.results[[i]]$b
z.new <- array(list.results[[i]]$b, dim=c(dim(list.results[[i]]$b), K)) +
list.results[[i]]$epsilon
plot.positions(z.new, b.new, alpha=1.5)
title(main=bquote(lambda == .(lambda.values[i])))
}
dev.off()
par(mfrow=c(2, 2), mar=c(0, 0, 1, 0)+0.1)
plot.positions(z, b, alpha=1)
title(main='Initial Positions')
for (i in 1:(length(lambda.values)-1)) {
b.new <- list.results[[i]]$b
z.new <- array(list.results[[i]]$b, dim=c(dim(list.results[[i]]$b), K)) +
list.results[[i]]$epsilon
plot.positions(z.new, b.new, alpha=1.5)
title(main=bquote(lambda == .(lambda.values[i])))
}
png('plot_positions.png', res=300, width=9, height=4.5, unit="in")
par(mfrow=c(2, 2), mar=c(0, 0, 1, 0)+0.1)
plot.positions(z, b, alpha=1)
title(main='Initial Positions')
for (i in 1:(length(lambda.values)-1)) {
b.new <- list.results[[i]]$b
z.new <- array(list.results[[i]]$b, dim=c(dim(list.results[[i]]$b), K)) +
list.results[[i]]$epsilon
plot.positions(z.new, b.new, alpha=1.5)
title(main=bquote(lambda == .(lambda.values[i])))
}
dev.off()
