out <- array(0, dim=c(dim(epsilon)[1], dim(epsilon)[2], dim(epsilon)[3]+1))
out[ , , 1] <- b
for (k in dim.epsilon[3]){
norm_value <- sqrt(sum(epsilon[ , , k]^2))
alpha <- 0
if(norm_value >= t*lambda){
alpha <- ((norm_value - t*lambda)/norm_value)*epsilon[ , , k]
}
out[ , , k] <- alpha
}
return(out)
}
gradient_g <- function(b, epsilon, y){
# Compute the gradient of the MLE function wrt to b and epsilon
#
# Args:
#     b:  numeric vector of dimension (n vs 2) with positions in 2-d of
#         each node
#     epsilon:  numeric array of dimension (n vs 2 vs k) with deviations in
#               2-d of from b for each node in each level
#     y: numeric array of dimension (n vs n vs k)
n <- dim(epsilon)[1]
K <- dim(epsilon)[3]
z <- array(b, dim=c(dim(b), K)) + epsilon
# computes exp(eta)/(1+exp(eta)) and allocates it to a
# n vs n vs K array (needed to be coherent with y)
exp.eta.aux <- exp(compute.eta(b, epsilon))/(1+compute.eta(b, epsilon))
exp.eta <- array(0, dim=c(n, n, K))
for(k in 1:K) {
m <- matrix(0,n,n)
m[lower.tri(m)] <- exp.eta.aux[ , k]
exp.eta[ , , k] <- m
}
# grad is the resulting gradient array (n vs 2 vs k+1)
# there are K+1 because of the 1 b + K epsilons
grad <- array(0, dim=c(dim(epsilon)[1], dim(epsilon)[2], dim(epsilon)[3]+1))
# gradient for b
for (m in 1:n) {
aux <- c(0, 0)
for (k in 1:K) {
if(m > 1){
for (j in 1:(m-1)) {
aux <- aux - (y[m, j, k] - 1 + exp.eta[m, j, k])*(z[m, ,k] - z[j, , k])
}
}
if(m<n){
for (i in (m+1):n) {
aux <- aux + (y[i, m, k] - 1 + exp.eta[i, m, k])*(z[i, ,k] - z[m, , k])
}
}
}
grad[m, , 1] <- 2*aux
}
# gradient for epsilon_k
for (k in 1:K) {
for (m in 1:n) {
aux <- c(0, 0)
if(m>1){
for (j in 1:(m-1)) {
aux <- aux - (y[m, j, k] - 1 + exp.eta[m, j, k])*(z[m, ,k] - z[j, , k])
}
}
if(m<n){
for (i in (m+1):n) {
aux <- aux + (y[i, m, k] - 1 + exp.eta[i, m, k])*(z[i, ,k] - z[m, , k])
}
}
grad[m, , (k+1)] <- 2*aux
}
}
# array (n vs 2 vs k+1)
return(grad)
}
generalized_grad <- function(b, epsilon, y, t, lambda){
# Computes the generalized gradient for the proximal gradient method
#
# Args:
#     b:  numeric vector of dimension (n vs 2) with positions in 2-d of
#         each node
#     epsilon:  numeric array of dimension (n vs 2 vs k) with deviations in
#               2-d of from b for each node in each level
#     y: numeric array of dimension (n vs n vs k)
#     t: scalar
n <- dim(epsilon)[1]
K <- dim(epsilon)[3]
beta <- array(0, dim=c(n, dim(epsilon)[2], K+1))
beta[ , , 1] <- b
beta[ , , 2:(K+1)] <- epsilon
grad_g <- gradient_g(b, epsilon, y)
beta1 <- beta - t*grad_g
b1 <- beta1[ , , 1]
epsilon1 <- beta1[ , , 2:(K+1)]
gen_grad = (1/t) * (beta - proximal_op(b1, epsilon1, t, lambda))
return(gen_grad)
}
update_beta <- function(b, epsilon, y, t, lambda){
# Updates the value of the parameter array
#
# Args:
#     b:  numeric vector of dimension (n vs 2) with positions in 2-d of
#         each node
#     epsilon:  numeric array of dimension (n vs 2 vs k) with deviations in
#               2-d of from b for each node in each level
#     y: numeric array of dimension (n vs n vs k)
#     t: scalar
#     lambda: scalar
n <- dim(epsilon)[1]
K <- dim(epsilon)[3]
beta <- array(0, dim=c(n, dim(epsilon)[2], K+1))
beta[ , , 1] <- b
beta[ , , 2:(K+1)] <- epsilon
beta_new = beta - t * generalized_grad(b, epsilon, y, t, lambda)
return(beta_new)
}
run.optimization <- function() {
n.steps <- 100
# read y
y <- dummy.y()
n <- dim(y)[1]
K <- dim(y)[3]
b <- array(runif(2*n), dim=c(n, 2))
epsilon <- array(runif(2*n, -0.5, 0.5), dim=c(n, 2, K))
obj.value <- rep(0, n.steps)
lambda <- 0.1
t <- 1
for (s in 1:n.steps) {
# evaluate objective function
obj.value[s] <- objective.function(b, epsilon, y, lambda)
cat(sprintf("Step: %4d ; Obj. Value: %15.6f \n", s, obj.value[s]))
# update parameters
param <- update_beta(b, epsilon, y, t, lambda)
b <- param[ , ,1]
epsilon <- param[ , ,2:(K+1)]
}
plot(1:n.steps, obj.value, type='l', xlab='step',
ylab='Objective Function')
z <- array(b, dim=c(dim(b), K)) + epsilon
par(mfrow=c(2,2))
plot(z[,1,1],z[,2,1], main="K=1")
plot(z[,1,1],z[,2,2], main="K=1")
plot(z[,1,3],z[,2,3], main="K=1")
dev.off()
}
n.steps <- 100
# read y
y <- dummy.y()
n <- dim(y)[1]
K <- dim(y)[3]
b <- array(runif(2*n), dim=c(n, 2))
epsilon <- array(runif(2*n, -0.5, 0.5), dim=c(n, 2, K))
obj.value <- rep(0, n.steps)
lambda <- 0.1
t <- 1
for (s in 1:n.steps) {
# evaluate objective function
obj.value[s] <- objective.function(b, epsilon, y, lambda)
cat(sprintf("Step: %4d ; Obj. Value: %15.6f \n", s, obj.value[s]))
# update parameters
param <- update_beta(b, epsilon, y, t, lambda)
b <- param[ , ,1]
epsilon <- param[ , ,2:(K+1)]
}
n.steps <- 100
# read y
y <- dummy.y()
n <- dim(y)[1]
K <- dim(y)[3]
b <- array(runif(2*n), dim=c(n, 2))
epsilon <- array(runif(2*n, -0.5, 0.5), dim=c(n, 2, K))
obj.value <- rep(0, n.steps)
lambda <- 0.1
t <- 1
for (s in 1:n.steps) {
# evaluate objective function
obj.value[s] <- objective.function(b, epsilon, y, lambda)
cat(sprintf("Step: %4d ; Obj. Value: %15.6f \n", s, obj.value[s]))
# update parameters
param <- update_beta(b, epsilon, y, t, lambda)
b <- param[ , ,1]
epsilon <- param[ , ,2:(K+1)]
}
n <- dim(y)[1]
K <- dim(y)[3]
b <- array(0, dim=c(n, 2))
epsilon <- array(0, dim=c(n, 2, K))
obj.value <- rep(0, n.steps)
lambda <- 0.1
t <- 1
for (s in 1:n.steps) {
# evaluate objective function
obj.value[s] <- objective.function(b, epsilon, y, lambda)
cat(sprintf("Step: %4d ; Obj. Value: %15.6f \n", s, obj.value[s]))
# update parameters
param <- update_beta(b, epsilon, y, t, lambda)
b <- param[ , ,1]
epsilon <- param[ , ,2:(K+1)]
}
b <- array(runif(2*n), dim=c(n, 2))
epsilon <- array(runif(2*n, -0.5, 0.5), dim=c(n, 2, K))
obj.value <- rep(0, n.steps)
lambda <- 0.1
t <- 1
for (s in 1:n.steps) {
# evaluate objective function
obj.value[s] <- objective.function(b, epsilon, y, lambda)
cat(sprintf("Step: %4d ; Obj. Value: %15.6f \n", s, obj.value[s]))
# update parameters
param <- update_beta(b, epsilon, y, t, lambda)
b <- param[ , ,1]
epsilon <- param[ , ,2:(K+1)]
}
plot(1:n.steps, obj.value, type='l', xlab='step',
ylab='Objective Function')
n.steps <- 80
b <- array(runif(2*n), dim=c(n, 2))
epsilon <- array(runif(2*n, -0.5, 0.5), dim=c(n, 2, K))
obj.value <- rep(0, n.steps)
lambda <- 0.1
t <- 1
for (s in 1:n.steps) {
# evaluate objective function
obj.value[s] <- objective.function(b, epsilon, y, lambda)
cat(sprintf("Step: %4d ; Obj. Value: %15.6f \n", s, obj.value[s]))
# update parameters
param <- update_beta(b, epsilon, y, t, lambda)
b <- param[ , ,1]
epsilon <- param[ , ,2:(K+1)]
}
plot(1:n.steps, obj.value, type='l', xlab='step',
ylab='Objective Function')
z <- array(b, dim=c(dim(b), K)) + epsilon
par(mfrow=c(2,2))
plot(z[,1,1],z[,2,1], main="K=1")
plot(z[,1,1],z[,2,2], main="K=1")
plot(z[,1,3],z[,2,3], main="K=1")
b
epsilon
?? contrl
x <- seq(-1, 1, by=0.01)
y <- x
x <- -6:16
contour(outer(x, x), method = "edge", vfont = c("sans serif", "plain"))
outer(x, y)
x <- seq(-1, 1, by=0.01)
y <- x
outer(x, y)
? outer
z = outer(x, y, FUN=sum(abs(x) + abs(y)))
z = outer(x, y, FUN={function(x,y){sum(abs(x) + abs(y))}})
z = outer(x, y, FUN={function(x,y){(abs(x) + abs(y))}})
z
countour(x, y, z)
contour(x, y, z)
z = outer(x, y, FUN={function(x,y){sqrt(x^2 + y^2)}})
contour(x, y, z)
? sign
sign(b)
? max
max(b, 0)
amax(b, 0)
pmax(b, 0)
z
?? plote#
?? plote3
? mesh
?? mesh
? wire
?? wire
? case
a <- list()
a[['case1']] <- 1234
a
? saveRDS
source('~/GoogleDrive/CMU/CLASSES/36725/project/hlsm/R/final_project.R', echo=TRUE)
source('../hlsm_sim.R')
a <- matrix(c(1,1,0,0))
a
a <- matrix(c(1,1,0,0), nrow=2)
a
a <- as.logical(matrix(c(1,1,0,0), nrow=2))
as.logical(matrix(c(1,1,0,0), nrow=2))
matrix(as.logical(c(1,1,0,0)), nrow=2)
? as.logical
y
source('../hlsm_sim_francisco.R')
setwd("~/GoogleDrive/CMU/CLASSES/36725/project/hlsm/R")
source('../hlsm_sim_francisco.R')
source('../hlsm_sim_francisco.R')
source('../hlsm_sim_francisco.R')
source('~/GoogleDrive/CMU/CLASSES/36725/project/hlsm/R/final_project.R', echo=TRUE)
source('../hlsm_sim_francisco.R')
y <- two.ovals
two.ovals
two.ovals[ , ,1]-two.ovals[ , ,2]
edges <- matrix(as.logical(y), dim = dim(y))
as.logical(y)
edges <- array(as.logical(y), dim = dim(y))
array
edges
source('~/GoogleDrive/CMU/CLASSES/36725/project/hlsm/R/final_project.R', echo=TRUE)
source('../hlsm_sim_francisco.R')
source('~/GoogleDrive/CMU/CLASSES/36725/project/hlsm/R/final_project.R', echo=TRUE)
source('../hlsm_sim_francisco.R')
y <- FALSE
z <- ovals.init$z
b <- ovals.init$b
N <- nrow(z)
y
edges <- matrix(as.logical(y), nrow = N, ncol = N)
edges
add=F
col="black"
if(is.null(xlim))
xlim <- range(c(z[,1,], b[,1]))
if(is.null(ylim))
ylim <- range(c(z[,2,], b[,2]))
xlim=NULL
ylim=NULL
if(is.null(xlim))
xlim <- range(c(z[,1,], b[,1]))
if(is.null(ylim))
ylim <- range(c(z[,2,], b[,2]))
plot.lsm(FALSE, b, add=F, col=1, xlim=xlim, ylim=ylim)
add=F
col="black"
N <- nrow(z)
edges <- matrix(as.logical(y), nrow = N, ncol = N)
if(add){
points(z, col=col)
} else {
plot(z, col=col, xlim=xlim, ylim=ylim, xaxt='n', yaxt='n')
}
z
for(i in 1:N){
for(j in 1:N){
if(edges[i,j]){
lines(z[c(i,j),1], z[c(i,j),2], col=col, xlab='', ylab='')
}
}
}
z
source('~/GoogleDrive/CMU/CLASSES/36725/project/hlsm/R/final_project.R', echo=TRUE)
source('../hlsm_sim_francisco.R')
list.results.total <- list()
for (case in c('individual', 'group')) {
b <- ovals.init$b
n <- dim(b)[1]
# ovals.init$z is (n,K,2)
z <- ovals.init$z
z <- aperm(z, c(1, 3, 2)) # permute to (n, 2, K)
K <- dim(z)[3]
epsilon <-  z - array(b, dim=c(dim(b), K))
y <- two.ovals
list.results <- list()
lambda.values <- c(0.1, 1, 10, 100)
for (i in 1:length(lambda.values)){
result.opt <- run.optimization(b, epsilon, y, lambda = lambda.values[i])
list.results[[i]] <- result.opt
}
library(ggplot2)
library(plyr)
library(dplyr)
library(tidyr)
n.steps <- length(list.results[[1]]$obj.value)
df.obj.values <- data.frame(matrix(NA,nrow=n.steps,
ncol=length(lambda.values)))
names(df.obj.values) <- lambda.values
for (i in 1:length(lambda.values)) {
df.obj.values[,i] <- list.results[[i]]$obj.value
}
df.obj.values$step <- 1:nrow(df.obj.values)
df.obj.values <- gather(df.obj.values, lambda, value, `0.1`:`100`, factor_key=TRUE)
g1 <- ggplot() + geom_line(data=df.obj.values,
aes(x=step, y=value, linetype=lambda))
g1 <- g1 + theme_bw() + scale_y_continuous(trans='log') +
theme(axis.text.y = element_blank(), legend.position=c(0.95,0.95),
legend.justification=c(1,1)) + ylab('Log Obj Function') +
xlab('iteration')
nf <- paste0('plot_objective_', case, '.png')
png(nf, res=300, width=5, height=3, unit="in")
print(g1)
dev.off()
nf <- paste0('plot_positions_', case, '.png')
png(nf, res=300, width=9, height=4.5, unit="in")
par(mfrow=c(2, 2), mar=c(0, 0, 1, 0)+0.1)
plot.positions(z, b, y)
title(main='Initial Positions')
for (i in 1:(length(lambda.values)-1)) {
b.new <- list.results[[i]]$b
z.new <- array(list.results[[i]]$b, dim=c(dim(list.results[[i]]$b), K)) +
list.results[[i]]$epsilon
plot.positions(z.new, b.new, y)
title(main=bquote(lambda == .(lambda.values[i])))
}
dev.off()
list.results.total[[case]] <- list.results
}
case == 'group'
list.results.total <- list()
for (case in c('individual', 'group')) {
b <- ovals.init$b
n <- dim(b)[1]
# ovals.init$z is (n,K,2)
z <- ovals.init$z
z <- aperm(z, c(1, 3, 2)) # permute to (n, 2, K)
K <- dim(z)[3]
epsilon <-  z - array(b, dim=c(dim(b), K))
y <- two.ovals
gf <- case == 'group'
list.results <- list()
lambda.values <- c(0.1, 1, 10, 100)
for (i in 1:length(lambda.values)){
result.opt <- run.optimization(b, epsilon, y, lambda = lambda.values[i],
group.level = gf)
list.results[[i]] <- result.opt
}
library(ggplot2)
library(plyr)
library(dplyr)
library(tidyr)
n.steps <- length(list.results[[1]]$obj.value)
df.obj.values <- data.frame(matrix(NA,nrow=n.steps,
ncol=length(lambda.values)))
names(df.obj.values) <- lambda.values
for (i in 1:length(lambda.values)) {
df.obj.values[,i] <- list.results[[i]]$obj.value
}
df.obj.values$step <- 1:nrow(df.obj.values)
df.obj.values <- gather(df.obj.values, lambda, value, `0.1`:`100`, factor_key=TRUE)
g1 <- ggplot() + geom_line(data=df.obj.values,
aes(x=step, y=value, linetype=lambda))
g1 <- g1 + theme_bw() + scale_y_continuous(trans='log') +
theme(axis.text.y = element_blank(), legend.position=c(0.95,0.95),
legend.justification=c(1,1)) + ylab('Log Obj Function') +
xlab('iteration')
nf <- paste0('plot_objective_', case, '.png')
png(nf, res=300, width=5, height=3, unit="in")
print(g1)
dev.off()
nf <- paste0('plot_positions_', case, '.png')
png(nf, res=300, width=9, height=4.5, unit="in")
par(mfrow=c(2, 2), mar=c(0, 0, 1, 0)+0.1)
plot.positions(z, b, y)
title(main='Initial Positions')
for (i in 1:(length(lambda.values)-1)) {
b.new <- list.results[[i]]$b
z.new <- array(list.results[[i]]$b, dim=c(dim(list.results[[i]]$b), K)) +
list.results[[i]]$epsilon
plot.positions(z.new, b.new, y)
title(main=bquote(lambda == .(lambda.values[i])))
}
dev.off()
list.results.total[[case]] <- list.results
}
source('~/GoogleDrive/CMU/CLASSES/36725/project/hlsm/R/final_project.R', echo=TRUE)
list.results.total <- list()
for (case in c('individual', 'group')) {
b <- ovals.init$b
n <- dim(b)[1]
# ovals.init$z is (n,K,2)
z <- ovals.init$z
z <- aperm(z, c(1, 3, 2)) # permute to (n, 2, K)
K <- dim(z)[3]
epsilon <-  z - array(b, dim=c(dim(b), K))
y <- two.ovals
gf <- case == 'group'
list.results <- list()
lambda.values <- c(0.1, 1, 10, 100)
for (i in 1:length(lambda.values)){
result.opt <- run.optimization(b, epsilon, y, lambda = lambda.values[i],
group.level = gf)
list.results[[i]] <- result.opt
}
figure.width <- 0.8 * 8.5 # inches
library(ggplot2)
library(plyr)
library(dplyr)
library(tidyr)
n.steps <- length(list.results[[1]]$obj.value)
df.obj.values <- data.frame(matrix(NA,nrow=n.steps,
ncol=length(lambda.values)))
names(df.obj.values) <- lambda.values
for (i in 1:length(lambda.values)) {
df.obj.values[,i] <- list.results[[i]]$obj.value
}
df.obj.values$step <- 1:nrow(df.obj.values)
df.obj.values <- gather(df.obj.values, lambda, value, `0.1`:`100`, factor_key=TRUE)
g1 <- ggplot() + geom_line(data=df.obj.values,
aes(x=step, y=value, linetype=lambda))
g1 <- g1 + theme_bw() + scale_y_continuous(trans='log') +
theme(axis.text.y = element_blank(), legend.position=c(0.95,0.95),
legend.justification=c(1,1)) + ylab('Log Obj Function') +
xlab('iteration')
nf <- paste0('plot_objective_', case, '.png')
png(nf, res=300, width=figure.width, height=3/5*figure.width, unit="in")
print(g1)
dev.off()
nf <- paste0('plot_positions_', case, '.png')
png(nf, res=300, width=figure.width, height=figure.width, unit="in")
par(mfrow=c(2, 2), mar=c(0, 0, 1, 0)+0.1)
plot.positions(z, b, y)
title(main='Initial Positions')
for (i in 1:(length(lambda.values)-1)) {
b.new <- list.results[[i]]$b
z.new <- array(list.results[[i]]$b, dim=c(dim(list.results[[i]]$b), K)) +
list.results[[i]]$epsilon
plot.positions(z.new, b.new, y)
title(main=bquote(lambda == .(lambda.values[i])))
}
dev.off()
list.results.total[[case]] <- list.results
}
